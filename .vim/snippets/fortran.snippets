snippet experiment
	program experiment
		implicit none
		${1}
	end program experiment
snippet program
	program ${1:`Filename()`}
		${2}
	end program $1
snippet implicit
	implicit ${1:NONE}
snippet do
	do ${1:i} = ${2:0}, ${3:10} ${4:, 1}
		${5}
	enddo ${6}
snippet wh
	do while(${1:count} ${2:<} ${3:max})
		${4}
	enddo ${5}
snippet dowh
	do while(${1:count} ${2:<} ${3:max})
		${4}
	enddo ${5}
snippet if
	if(${1:count} ${2:<} ${3:max}) then
		${4}
	endif ${5}
snippet iff
	if(${1:count} ${2:>} ${3:max}) ${4}
snippet elif
	else if(${1:count} ${2:<} ${3:max}) then
		${4}
snippet else
	else
		${1}
snippet sw
	select case(${1:var})
		case default
			${2}
		case(${3:condition})
			${4}
		end select ${6}
snippet c
	case(${1:case})
		${2}
snippet until
	do
		${4}
	until(${1} ${2} ${3}) ${5}
snippet >
	.GT.
snippet < 
	.LT.
snippet >=
	.GE.
snippet <=
	.LE.
snippet ==
	.EQ.
snippet !=
	.NE.
snippet && 
	.AND.
snippet ||
	.OR.
snippet !
	.NOT.
snippet wr
	write (${1:*},${2:*}) ${3}
snippet re
	read (${1:*},${2:*}) ${3}
snippet mod
	module ${1:`Filename()`}
	contains
		${2}
	end module $1
snippet fun
	${1:real(8)} function ${2:name}(${3:arguments})
		${4}
	end function $2
snippet sub
	subroutine ${1:name}(${2})
		${3}
	end subroutine $1 ${4}
snippet op
	open(unit=${1:13},file=${2:filename}${3:,})	
snippet cl
	close(${1})
snippet mpiinit
	call mpi_init(${1:ierr})${2}
snippet mpifinal
	call mpi_finalize(${1:ierr})${2}
snippet mpisend
	call mpi_send(${1:buffer}, ${2:count}, ${3:MPI_INTEGER/MPI_REAL/MPI_DOUBLE_PRECISION}, ${4:to}, &
			${5:my_tag}, ${6:MPI_COMM_WORLD}, ${7:ierr})${8}
snippet mpirec
	call mpi_recv(${1:buffer}, ${2:count}, ${3:MPI_INTEGER/MPI_REAL/MPI_DOUBLE_PRECISION}, ${4:from}, &
			${5:my_tag}, ${6:MPI_COMM_WORLD}, ${7:my_status}, ${8:ierr})${9}
snippet mpiinitd
	call mpi_initialized(${1:status}, ${2:ierr})${3}
snippet mpifinald
	call mpi_finalized(${1:status}, ${2:ierr})${4}
snippet mpimystat
	integer, dimension(MPI_STATUS_SIZE) :: my_status${1}
snippet mpinodename
	MPI_MAX_PROCESSOR_NAME${1}
snippet mpicomsize
	call mpi_comm_size(${1:MPI_COMM_WORLD}, ${2:comm_size}, ${3:ierr})${4}
snippet mpirank
	call mpi_comm_rank(${1:MPI_COMM_WORLD}, ${2:my_rank}, ${3:ierr})${4}
snippet mpireduce
	call mpi_reduce(${1:send_buffer}, ${2:recv_buffer}, ${3:count}, ${4:MPI_INTEGER/MPI_REAL/MPI_DOUBLE_PRECISION}, &
			${5:MPI_SUM/MPI_MIN/MPI_MAX/MPI_PROD}, ${6:master}, ${7:MPI_COMM_WORLD}, ${8:ierr})${9}
snippet mpigather
	call mpi_gather(${1:send_buffer}, ${2:send_count}, ${3:MPI_INTEGER/MPI_REAL/MPI_DOUBLE_PRECISION}, &
			${4:rec_buffer}, ${5:$2}, ${6:MPI_INTEGER/MPI_REAL/MPI_DOUBLE_PRECISION}, ${7:master}, ${8:MPI_COMM_WORLD}, ierr)${9}
snippet mpiscatter
	call mpi_scatter(${1:send_buffer}, ${2:send_count}, ${3:MPI_INTEGER/MPI_REAL/MPI_DOUBLE_PRECISION}, &
			${4:rec_buffer}, ${5:rec_count}, ${6:MPI_INTEGER/MPI_REAL/MPI_DOUBLE_PRECISION}, ${7:master}, ${8:MPI_COMM_WORLD}, ierr)${9}
snippet mpiabort
	call mpi_abort(${1:MPI_COMM_WORLD}, ${2:error_code}, ${3:ierr})${4}
snippet mpibcast
	call mpi_bcast(${1:buffer}, ${2:count}, ${3:MPI_INTEGER/MPI_REAL/MPI_DOUBLE_PRECISION}, ${4:master}, &
			${5:MPI_COMM_WORLD}, ${6:ierr})${7}
snippet mpibarrier
	call mpi_barrier(${1:MPI_COMM_WORLD}, ierr)${2}
snippet mpiwtime
	call mpi_wtime(${1:clock})
